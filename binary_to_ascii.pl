use Data::Dumper qw(Dumper);
use strict;
use warnings;

my %ascii = (
  "00000000" => [0, "00", "NUL"],
  "00000001" => [0, "01", "SOH"],
  "00000010" => [0, "02", "STX"],
  "00000011" => [0, "03", "ETX"],
  "00000100" => [0, "04", "EOT"],
  "00000101" => [0, "05", "ENQ"],
  "00000110" => [0, "06", "ACK"],
  "00000111" => [0, "07", "BEL"],
  "00001000" => [0, "08", "BS"],
  "00001001" => [0, "09", "HT"],
  "00001010" => [0, "0A", "LF"],
  "00001011" => [0, "0B", "VT"],
  "00001100" => [0, "0C", "FF"],
  "00001101" => [0, "0D", "CR"],
  "00001110" => [0, "0E", "SO"],
  "00001111" => [0, "0F", "SI"],
  "00010000" => [0, "10", "DLE"],
  "00010001" => [0, "11", "DC1"],
  "00010010" => [0, "12", "DC2"],
  "00010011" => [0, "13", "DC3"],
  "00010100" => [0, "14", "DC4"],
  "00010101" => [0, "15", "NAK"],
  "00010110" => [0, "16", "SYN"],
  "00010111" => [0, "17", "ETB"],
  "00011000" => [0, "18", "CAN"],
  "00011001" => [0, "19", "EM"],
  "00011010" => [0, "1A", "SUB"],
  "00011011" => [0, "1B", "ESC"],
  "00011100" => [0, "1C", "FS"],
  "00011101" => [0, "1D", "GS"],
  "00011110" => [0, "1E", "RS"],
  "00011111" => [0, "1F", "US"],

  "00100000" => [1, "20", ' '],
  "00100001" => [1, "21", '!'],
  "00100010" => [1, "22", '"'],
  "00100011" => [1, "23", '#'],
  "00100100" => [1, "24", '$'],
  "00100101" => [1, "25", '%'],
  "00100110" => [1, "26", '&amp;'],
  "00100111" => [1, "27", '\''],
  "00101000" => [1, "28", '('],
  "00101001" => [1, "29", ')'],
  "00101010" => [1, "2A", '*'],
  "00101011" => [1, "2B", '+'],
  "00101100" => [1, "2C", ','],
  "00101101" => [1, "2D", '-'],
  "00101110" => [1, "2E", '.'],
  "00101111" => [1, "2F", '/'],
  "00110000" => [1, "30", '0'],
  "00110001" => [1, "31", '1'],
  "00110010" => [1, "32", '2'],
  "00110011" => [1, "33", '3'],
  "00110100" => [1, "34", '4'],
  "00110101" => [1, "35", '5'],
  "00110110" => [1, "36", '6'],
  "00110111" => [1, "37", '7'],
  "00111000" => [1, "38", '8'],
  "00111001" => [1, "39", '9'],
  "00111010" => [1, "3A", ':'],
  "00111011" => [1, "3B", ';'],
  "00111100" => [1, "3C", '&lt;'],
  "00111101" => [1, "3D", '='],
  "00111110" => [1, "3E", '&gt;'],
  "00111111" => [1, "3F", '?'],
  "01000000" => [1, "40", '@'],
  "01000001" => [1, "41", 'A'],
  "01000010" => [1, "42", 'B'],
  "01000011" => [1, "43", 'C'],
  "01000100" => [1, "44", 'D'],
  "01000101" => [1, "45", 'E'],
  "01000110" => [1, "46", 'F'],
  "01000111" => [1, "47", 'G'],
  "01001000" => [1, "48", 'H'],
  "01001001" => [1, "49", 'I'],
  "01001010" => [1, "4A", 'J'],
  "01001011" => [1, "4B", 'K'],
  "01001100" => [1, "4C", 'L'],
  "01001101" => [1, "4D", 'M'],
  "01001110" => [1, "4E", 'N'],
  "01001111" => [1, "4F", 'O'],
  "01010000" => [1, "50", 'P'],
  "01010001" => [1, "51", 'Q'],
  "01010010" => [1, "52", 'R'],
  "01010011" => [1, "53", 'S'],
  "01010100" => [1, "54", 'T'],
  "01010101" => [1, "55", 'U'],
  "01010110" => [1, "56", 'V'],
  "01010111" => [1, "57", 'W'],
  "01011000" => [1, "58", 'X'],
  "01011001" => [1, "59", 'Y'],
  "01011010" => [1, "5A", 'Z'],
  "01011011" => [1, "5B", '['],
  "01011100" => [1, "5C", '\\'],
  "01011101" => [1, "5D", ']'],
  "01011110" => [1, "5E", '^'],
  "01011111" => [1, "5F", '_'],
  "01100000" => [1, "60", '`'],
  "01100001" => [1, "61", 'a'],
  "01100010" => [1, "62", 'b'],
  "01100011" => [1, "63", 'c'],
  "01100100" => [1, "64", 'd'],
  "01100101" => [1, "65", 'e'],
  "01100110" => [1, "66", 'f'],
  "01100111" => [1, "67", 'g'],
  "01101000" => [1, "68", 'h'],
  "01101001" => [1, "69", 'i'],
  "01101010" => [1, "6A", 'j'],
  "01101011" => [1, "6B", 'k'],
  "01101100" => [1, "6C", 'l'],
  "01101101" => [1, "6D", 'm'],
  "01101110" => [1, "6E", 'n'],
  "01101111" => [1, "6F", 'o'],
  "01110000" => [1, "70", 'p'],
  "01110001" => [1, "71", 'q'],
  "01110010" => [1, "72", 'r'],
  "01110011" => [1, "73", 's'],
  "01110100" => [1, "74", 't'],
  "01110101" => [1, "75", 'u'],
  "01110110" => [1, "76", 'v'],
  "01110111" => [1, "77", 'w'],
  "01111000" => [1, "78", 'x'],
  "01111001" => [1, "79", 'y'],
  "01111010" => [1, "7A", 'z'],
  "01111011" => [1, "7B", '{'],
  "01111100" => [1, "7C", '|'],
  "01111101" => [1, "7D", '}'],
  "01111110" => [1, "7E", '~'],

  "01111111" => [0, "7F", "DEL"],
);

open my $fp, "< $ARGV[0]" or die $!;
binmode($fp, ":bytes");

my @info = ();
my @result = ();
push(@info, unpack("B*", $_)) for <$fp>;

local $SIG{__WARN__} = sub {die $_[0]};

for(@info){
  my $s = $_;
  my $l = length($_) / 8;
  my $sss = "";
  foreach my $i (0..$l - 1){
    my $ss = substr($s, $i * 8, 8);
    my ($a, $b);
    eval {
      $a = $ascii{$ss}[2];
      $b = $ascii{$ss}[0];
    };
    $a = 'ï¿½' if !defined($a) or $b == 0;
    $sss .= $a;
  }
  push(@result, $sss);
}
print $_."\n" for @result;
